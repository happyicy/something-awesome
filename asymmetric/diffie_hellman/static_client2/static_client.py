from pwn import *
from Crypto.Util.number import getPrime, isPrime, long_to_bytes
from sympy.ntheory.modular import crt
from sympy.ntheory.residue_ntheory import discrete_log
from sympy import nextprime

p = 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919

# primes = []
# i = 3
# while len(primes) < 100:
#     if isPrime(2*i*p+1):
#         primes.append(i)
#     i = nextprime(i, 1)

# f = open("./asymmetric/diffie_hellman/primes.txt", "w")
# f.write(str(primes))

primes = [3319, 7297, 10891, 25117, 31237, 54547, 54631, 55147, 59359, 70237, 84499, 94597, 113041, 139609, 141769, 149161, 151429, 169009, 170047, 178939, 179899, 181459, 189901, 194167, 194899, 201511, 212239, 216571, 236701, 260179, 260959, 283501, 291439, 311821, 319237, 327661, 339991, 347959, 359101, 370441, 381739, 384259, 388237, 397351, 398011, 400009, 412891, 423751, 435139, 435541, 457117, 492901, 523759, 528691, 533077, 544501, 547741, 553897, 564391, 567631, 570601, 571279, 638767, 650071, 659539, 662047, 668671, 669181, 674239, 691189, 692161, 699469, 702451, 707677, 719119, 723529, 775507, 780841, 804511, 805867, 806521, 811411, 812167, 822589, 834181, 860887, 872161, 891799, 898327, 898981, 936379, 938341, 939109, 944149, 946819, 959659, 973759, 1005679, 1006987, 1016737]

f = open("./asymmetric/diffie_hellman/static_client2/primes.txt", "a")
for x in primes:
    print(primes.index(x))
    conn = remote("socket.cryptohack.org", 13378)
    conn.recvline()
    conn.recvline()
    conn.recvline()
    conn.send(b'{"p": "' + bytes(hex(2*x*p+1), "utf-8") + b'", "g": "0x02", "A": "0x03"}')
    f.write(str(pow(int(conn.recvline()[71:-3].decode(), 0), 2*p, 2*x*p+1)) + "\n")
    conn.close()

f = open("./asymmetric/diffie_hellman/static_client2/primes.txt", "r")
f.readline()
residues = []
mods = []
for i in range(100):
    power = int(f.readline())
    base = pow(2, 2*p, 2*p*primes[i]+1)
    residues.append(discrete_log(2*p*primes[i]+1, power, base, primes[i]))
    mods.append(primes[i])

print(crt(mods, residues))

b = 1919572943691512325783103720167834163677411292709378502535498859989993544026380143919501049584589675317643993465536543895780854808442293000014297210200227069779643763121704810281976733978781152126062646602812482025293137787739116693980988513420732289020477701182639042794562638875881378349771734410919106042203493166198706573467903966100368713572415175654342828296086659529676015616513470105470901979846373335352656586302787870238998914215908919919219987614105175
Alice = 1318958244360808039312381649387116357827558086879044841301371781311501529575543411529033170678833367855699351002775879484735322878647736656131558398994128136718956792141397113846043446635594054078470692745718974481315808213664869258054476395949902366742600837665395365754525897564431385751130070061031602985745106858831916575102939514944196499206422250778210379894213204594940027963868321435660275870556063381533365099486227601886109784430496335196647829054851219

key = pow(Alice, b, p)
print(key)