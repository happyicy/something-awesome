alice sends bob {p, g, A} for dh
bob sends {B}
alice sends {iv, cipher}

you send bob {p, g, C} for dh
bob sends {B} but uses same secret b (same across every time you connect)
bob sends you {iv, cipher} telling you that he used the same secret b

decrypt alice's message


Intercepted from Alice: 
{
    "p": "0xffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff",
    "g": "0x02",
    "A": "0x5836ae1ccdb21633efdacc96de0816eeb645a5f29535bd2e4a2accb626c9ddd66c2349ddeadebb7c455f80821f4b7869edeafc368a30b1f20fae5a1d25d00af3229fa7a5285462124cd2e1c3b007db24eff7e9b54ff1df77d354ec6953ae5f59f1fde9ff332148bceceb09f0ebfeb07351e9fba8efc8713ba7144f7768a9fa3c62e79884b6a0a35496d9ad1b87f1b637d618d5a9b6658819792a0d15cf672fe21783e613cbcc6d3df3c8ade8b03930c3262fa5882447ba0272eed55a6623cb57"
}
Intercepted from Bob: {"B": "0x8d79b69390f639501d81bdce911ec9defb0e93d421c02958c8c8dd4e245e61ae861ef9d32aa85dfec628d4046c403199297d6e17f0c9555137b5e8555eb941e8dcfd2fe5e68eecffeb66c6b0de91eb8cf2fd0c0f3f47e0c89779276fa7138e138793020c6b8f834be20a16237900c108f23f872a5f693ca3f93c3fd5a853dfd69518eb4bab9ac2a004d3a11fb21307149e8f2e1d8e1d7c85d604aa0bee335eade60f191f74ee165cd4baa067b96385aa89cbc7722e7426522381fc94ebfa8ef0"}
Intercepted from Alice: {"iv": "9f28948f930998ca42da5c977e3e8438", "encrypted": "dc3e24675200780a21b83e3cc078e8c9af5df8622dd9859403fac1c32cb1bb4e"}

p = 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919
g = 2

my prime = 8843917876570006104366578436976448366009858156260583513913913527368907725188573839884934304797640241
Send to Bob: {"p": "0x11c5a9d984853c496767e4254a4e7cca6d14997aa7", "g": "0x02", "A":  "0x02"}

Bob says to you: {"B": "0xfc524e2a786cdb98be1bfdb3b2dc9f0daff4685180fca747054a806f0272fd442c737d436c664829469"}
B = 8623287424440334777932045934469386489768995128127598871835242682844515649426848760760192783941276777
Bob says to you: {"B": "0xfc524e2a786cdb98be1bfdb3b2dc9f0daff4685180fca747054a806f0272fd442c737d436c664829469"}
Bob says to you: {"iv": "6a19ef4eedce584e2efc8e95534ae541", "encrypted": "40f254b089cb68219b86ca9946218accb169948c10a10cce6a6548c02b436f95ac2a9ac73ad337fec2db8fedec4e53886cfcf35c96b5609acad015fb3267c97cac039261bd3c949740f128633c51e879"}

alice and bob's key: pow(A, b, p)

Problem: My prime isn't big enough, Bob's power is too big 
Big primes are too slow for discrete log

12am idea: do it with 25 different small primes, and use chinese remainder theorem
Details:
For each residue r_i and prime p_i, we have pow(2, b, p_i) = r_i. We can compute discrete log on p_i since p_i is small, and get b == q_i mod (p_i-1) for each i
After this, we chinese remainder theorem, and with luck our gcd greater than the existing prime.

Using sage, discrete_log is sometimes slow, so we automate what we can and then manual the rest online

from cysignals.alarm import alarm, AlarmInterrupt
for r, p in zip(residues, primes):
    print("trying")
    try:
        alarm(10)
        logs.append(discrete_log(Mod(r, p), Mod(g, p)))
    except KeyboardInterrupt:
        print("too slow")
        logs.append(-1)

New plan: use a lot more primes, and then discard a bunch







cry
{"p": "0xffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff", "g": "0x88ef4fc89122a4abe965ec9b25cf5401c211a300600c3411849aeeb3846f4bd1876bfc53a81fbd311f3d7722463996559aba603f1d8098a7dbca640f7381a82a1676fbce06a023dbd676ca66508acd3d3641f579de127b2503d48202b7b38b44b28017aa94d64e071aad0a9d32076206d24c558e5e7c049339988cd0a65e5b4e49a5964385a9c29840d08baa9132b5c9891e8ed02e6c228005b8475be2a312d3c2a7d08df6a1fef87882d3baa4d12278113db2057839a3ff04accbe5c2c21739", "A": "0x02"}